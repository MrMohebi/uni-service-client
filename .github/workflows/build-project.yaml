name: build project

on: 
  push:
      branches:
        - master
        - dev


jobs:
  dev-build-project:
    if: contains(github.event.head_commit.message, 'dev-build')
    runs-on: ubuntu-latest
    name: 'dev build'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to private registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.cicd-assets/Dockerfile-ssr-dev
          build-args: |
            FROM_IMAGE=${{ secrets.REGISTRY_URL }}/unimun-front/dev/base:latest
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          no-cache: true
          tags: '${{ secrets.REGISTRY_URL }}/unimun-front/dev/project:latest'
          cache-from: 'type=registry,ref=${{ secrets.REGISTRY_URL }}/unimun-front/dev/project:buildcache'
          cache-to: 'type=registry,ref=${{ secrets.REGISTRY_URL }}/unimun-front/dev/project:buildcache,mode=max'

  dev-deploy-project:
    needs: dev-build-project
    if: contains(github.event.head_commit.message, 'dev-build')
    runs-on: ubuntu-latest
    name: 'dev deploy project'
    steps:
      - name: ask cd service to deploy
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.CD_URL }}/updateServiceLatest
          method: 'POST'
          timeout: 120000
          data: '{"name": "${{ secrets.CD_DEV_NAME }}", "token": "${{ secrets.CD_DEV_TOKEN }}"}'

  prod-build-project:
    if: contains(github.event.head_commit.message, 'prod-build')
    runs-on: ubuntu-latest
    name: 'prod build'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to private registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.cicd-assets/Dockerfile-ssr-prod
          build-args: |
            FROM_IMAGE=${{ secrets.REGISTRY_URL }}/unimun-front/prod/base:latest
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: '${{ secrets.REGISTRY_URL }}/unimun-front/prod/project:latest'
          cache-from: 'type=registry,ref=${{ secrets.REGISTRY_URL }}/unimun-front/prod/project:buildcache'
          cache-to: 'type=registry,ref=${{ secrets.REGISTRY_URL }}/unimun-front/prod/project:buildcache,mode=max'

  prod-deploy-project:
    needs: prod-build-project
    if: contains(github.event.head_commit.message, 'prod-build')
    runs-on: ubuntu-latest
    name: 'prod deploy project'
    steps:
      - name: ask cd service to deploy
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.CD_URL }}/updateServiceLatest
          method: 'POST'
          timeout: 120000
          data: '{"name": "${{ secrets.CD_PROD_NAME }}", "token": "${{ secrets.CD_PROD_TOKEN }}"}'