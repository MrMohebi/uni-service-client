# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @response on FIELD_DEFINITION

directive @userAuth(token: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @adminHasAccess(roles: [AdminRole!]!) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @adminHasAccessNoWrapper(roles: [AdminRole!]!) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Appeal {
    attachments: [UploadedFile]
    categoryID: String
    connectWay: String
    createdAt: Int
    details: String
    hashtagIDs: [ID]
    hashtags: [String]
    id: ID
    link: String
    modifiedContentAt: Int
    priceEnd: Int
    priceStart: Int
    publishedAt: Int
    seen: Int
    status: String
    tagLink: String
    title: String
    universityID: String
    verifiedAt: Int
    verifierID: String
}

type AppealAdmin {
    attachments: [UploadedFile]
    categoryID: String
    completedAt: Int
    connectWay: String
    createdAt: Int
    creator: User
    deletedAt: Int
    details: String
    doerID: String
    hashtagIDs: [ID]
    hashtags: [String]
    id: ID
    link: String
    modifiedContentAt: Int
    priceEnd: Int
    priceStart: Int
    publishedAt: Int
    seen: Int
    status: String
    tagLink: String
    title: String
    universityID: String
    verifiedAt: Int
    verifierID: String
}

"A paginated list of AppealAdmin edges."
type AppealAdminConnection {
    "A list of AppealAdmin edges."
    edges: [AppealAdminEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type AppealAdmin and a cursor."
type AppealAdminEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The AppealAdmin node."
    node: AppealAdmin!
}

"A paginated list of Appeal edges."
type AppealConnection {
    "A list of Appeal edges."
    edges: [AppealEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type Appeal and a cursor."
type AppealEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The Appeal node."
    node: Appeal!
}

type BankAccount {
    accountNumber: String
    accountOwner: String
    bank: String
    cardNumber: String
    createdAt: Int!
    id: ID!
    isVerified: Boolean!
    shaba: String
}

type Book {
    ISBN: String
    appearance: BookAppearance
    appearanceID: ID
    attachments: [UploadedFile]
    bookFiles: [UploadedFile]
    category: BookCategory
    categoryID: ID
    city: String
    cityID: ID
    connectWay: String
    createdAt: Int
    creator: UserProtected
    details: String
    downloaded: Int
    edition: Int
    id: ID
    isBook: Boolean
    isDownloadable: Boolean
    isLiked: Boolean
    isPurchasable: Boolean
    language: String
    lessen: String
    likes: Int
    location: Location
    modifiedContentAt: Int
    pages: Int
    price: Int
    publishedAt: Int
    publishedDate: Int
    publisher: String
    seen: Int
    sizeMB: Int
    status: String
    teacher: String
    templateId: String
    term: String
    title: String
    translator: String
    uniqueDownloaded: Int
    university: String
    universityID: ID
    verifiedAt: Int
    writer: String
    wroteYear: Int
}

type BookAdmin {
    ISBN: String
    appearance: BookAppearance
    appearanceID: ID
    attachments: [UploadedFile]
    bookFiles: [UploadedFile]
    category: BookCategory
    categoryID: ID
    city: String
    cityID: ID
    connectWay: String
    createdAt: Int
    creator: User
    details: String
    downloaded: Int
    edition: Int
    id: ID
    isBook: Boolean
    isDownloadable: Boolean
    isLiked: Boolean
    isPurchasable: Boolean
    language: String
    lessen: String
    likes: Int
    location: Location
    modifiedContentAt: Int
    pages: Int
    price: Int
    publishedAt: Int
    publishedDate: Int
    publisher: String
    seen: Int
    sizeMB: Int
    status: String
    teacher: String
    templateId: String
    term: String
    title: String
    translator: String
    uniqueDownloaded: Int
    university: String
    universityID: ID
    verifiedAt: Int
    writer: String
    wroteYear: Int
}

"A paginated list of BookAdmin edges."
type BookAdminConnection {
    "A list of BookAdmin edges."
    edges: [BookAdminEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type BookAdmin and a cursor."
type BookAdminEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The BookAdmin node."
    node: BookAdmin!
}

type BookAppearance {
    details: String
    id: ID
    score: Int
    title: String
}

type BookCategory {
    hasChild: Boolean
    id: ID
    order: Int
    parentID: ID
    phrase: String
    title: String
}

"A paginated list of Book edges."
type BookConnection {
    "A list of Book edges."
    edges: [BookEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type Book and a cursor."
type BookEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The Book node."
    node: Book!
}

type CreatePayment {
    url: String
}

type Location {
    lat: String!
    lon: String!
    text: String!
}

type Login {
    deviceToken: String
    id: ID!
    name: String
    phone: String!
    token: String!
    username: String
}

type Mutation {
    addSubscriber(age: String, email: String, name: String, phone: String): Int
    adminChargeWallet(amount: Int!, walletID: ID!): Response_adminChargeWallet_kgem
    adminModifyAd(appealID: ID, bookID: ID, reason: String, status: String!, token: String): Boolean
    appealConnectClick(appealID: ID!, userID: ID): Response_appealConnectClick_rstf
    bookConnectClick(bookID: ID!, userID: ID!): Response_bookConnectClick_swpq
    buyDigitalBook(id: ID!): Response_buyDigitalBook_pesw
    chargeWallet(amount: Int!): Response_chargeWallet_qkpi
    createAddress(lat: String!, lon: String!, text: String!): Response_createAddress_bpgu
    createAppeal(categoryID: String, connectWay: String, details: String, files: [UploadedFileInput], hashtags: [String], priceEnd: Int!, priceStart: Int!, title: String!): Response_createAppeal_qksb
    createBankAccount(shaba: String!): Response_createBankAccount_eywn
    createBook(ISBN: String, appearanceID: ID, attachments: [UploadedFileInput], bookFiles: [UploadedFileInput], categoryID: ID!, city: String, cityID: ID, connectWay: String, details: String, edition: Int, isBook: Boolean!, isDownloadable: Boolean!, isPurchasable: Boolean!, language: String, lessen: String, location: LocationInput, pages: Int, price: Int, publishedDate: Int, publisher: String, sizeMB: Int, teacher: String, term: String, title: String, translator: String, university: String, universityID: ID, writer: String, wroteYear: Int): Response_createBook_lfja
    createBookTemplate(ISBN: String, appearanceID: ID, attachments: [UploadedFileInput], bookFiles: [UploadedFileInput], categoryID: ID!, details: String, edition: Int, isBook: Boolean!, isDownloadable: Boolean!, isPurchasable: Boolean!, language: String, lessen: String, pages: Int, price: Int, publishedDate: Int, publisher: String, sizeMB: Int, teacher: String, term: String, title: String, university: String, universityID: ID, writer: String, wroteYear: Int): Response_createBookTemplate_rqkn
    downloadCountBook(id: ID!): Boolean
    likeBook(id: ID!, isLiked: Boolean!): Response_likeBook_fdad
    quickSubmitBook(file: UploadedFileInput!, name: String, phone: String, price: Int): Response_quickSubmitBook_ymei
    referencePage(id: String!, userAgent: String!): Boolean
    seen(list: [Seen], type: String!): Response_seen_rkxn
    sendVCode(phone: String!, userAgent: String): Response_sendVCode_lott
    updateAddress(id: ID!, lat: String, lon: String, text: String): Response_updateAddress_mxzu
    updateAppeal(categoryID: String, connectWay: String, details: String, files: [UploadedFileInput], hashtags: [String], id: ID!, priceEnd: Int, priceStart: Int, status: String, title: String): Response_updateAppeal_scec
    updateBook(ISBN: String, appearanceID: ID, attachments: [UploadedFileInput], bookFiles: [UploadedFileInput], categoryID: ID, city: String, cityID: ID, connectWay: String, details: String, edition: Int, id: ID!, isDownloadable: Boolean, isPurchasable: Boolean, language: String, lessen: String, location: LocationInput, pages: Int, price: Int, publishedDate: Int, publisher: String, status: String, teacher: String, term: String, title: String, translator: String, university: String, universityID: ID, writer: String, wroteYear: Int): Response_updateBook_sjge
    updateUser(bio: String, birthAt: Int, cityID: ID, email: String, hasAppealsHistory: Boolean, hasAskHistory: Boolean, hasBookHistory: Boolean, hasLastSeen: Boolean, lastname: String, name: String, nationalId: String, universityID: ID, username: String): Response_updateUser_zeoz
    uploadPrivateFileAccess(bookID: String, fileMime: String!, fileName: String!, filePath: String!, fileType: String!, previewPath: String, sizeMB: Int, thumbnailPath: String, type: String!, uploadedAsFile: Boolean): Response_uploadPrivateFileAccess_fonu
    uploadPublicFileAccess(appealID: String, bookID: String, fileMime: String!, fileName: String!, filePath: String!, fileType: String!, previewPath: String, sizeMB: Int, thumbnailPath: String, type: String!, uploadedAsFile: Boolean): Response_uploadPublicFileAccess_rtpc
    verifyVCode(phone: String!, referenceCode: String, vCode: String!): Response_verifyVCode_xkbn
    wantBook(title: String!): Response_wantBook_uajm
    withdrawRequest(amount: Int!, bankAccountID: ID, toBeDoneAt: Int): Response_withdrawRequest_fork
}

type Notification {
    appeal: Appeal
    book: Book
    created_at: String
    id: ID
    sender: User
    type: String!
    user: User
}

"A paginated list of Notification edges."
type NotificationConnection {
    "A list of Notification edges."
    edges: [NotificationEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type Notification and a cursor."
type NotificationEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The Notification node."
    node: Notification!
}

"Information about pagination using a Relay style cursor connection."
type PageInfo {
    "Number of nodes in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "The cursor to continue paginating forwards."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "Index of the last available page."
    lastPage: Int!
    "The cursor to continue paginating backwards."
    startCursor: String
    "Total number of nodes in the paginated connection."
    total: Int!
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Are there more pages after this one?"
    hasMorePages: Boolean!
    "Index of the last item in the current page."
    lastItem: Int
    "Index of the last available page."
    lastPage: Int!
    "Number of items per page."
    perPage: Int!
    "Number of total available items."
    total: Int!
}

type Query {
    addresses: Response_addresses_fibk
    adminAppeal(id: ID!): Response_adminAppeal_pyrc
    adminAppeals(
        "A cursor after which elements are returned."
        after: String,
        filterByStatus: [String],
        "Limits number of fetched items. Maximum allowed value: 500."
        first: Int = 20,
        searchText: String
    ): AppealAdminConnection
    adminBooks(
        "A cursor after which elements are returned."
        after: String,
        filterByStatus: [String],
        "Limits number of fetched items. Maximum allowed value: 500."
        first: Int = 20,
        searchText: String
    ): BookAdminConnection
    adminQuickSubmittedBooks(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 500."
        first: Int = 20
    ): QuickBookConnection
    adminUser(id: ID!): Response_adminUser_kecj
    adminUsers(
        "A cursor after which elements are returned."
        after: String,
        email: String,
        "Limits number of fetched items. Maximum allowed value: 500."
        first: Int = 20,
        name: String,
        phone: String,
        username: String
    ): UserForAdminConnection
    adminWantedBooks(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 500."
        first: Int = 20
    ): WantedBookConnection
    appeal(id: ID!): Appeal
    appeals(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 100."
        first: Int = 20,
        searchText: String
    ): AppealConnection
    appealsUserCreated(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 100."
        first: Int = 20
    ): AppealConnection
    book(id: ID!): Response_book_gadz
    bookAppearances: Response_bookAppearances_jdtt
    bookCategories(searchText: String): Response_bookCategories_zkoo
    bookTemplate(templateId: String!): Book
    books(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 100."
        first: Int = 20,
        searchText: String
    ): BookConnection
    booksUserCreated(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 100."
        first: Int = 20
    ): BookConnection
    canDownload(cypher: String, filePath: String!, type: String!): Int
    isReferenceCodeValid(referenceCode: String): Response_isReferenceCodeValid_ddpl
    login(password: String!, username: String!): Response_login_rfda
    notifications(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 100."
        first: Int = 20
    ): NotificationConnection
    previousQuickBooks(phone: String!): Response_previousQuickBooks_pxyb
    transactions(
        "A cursor after which elements are returned."
        after: String,
        "Limits number of fetched items. Maximum allowed value: 100."
        first: Int = 20
    ): TransactionConnection
    ttt(x: String): String
    user: Response_user_fbhr
    wallet: Response_wallet_xfdi
}

type QuickBook {
    createdAt: Int
    file: UploadedFile!
    name: String
    phone: String
    price: Int
    status: String
    user: UserProtected
    userID: ID
}

"A paginated list of QuickBook edges."
type QuickBookConnection {
    "A list of QuickBook edges."
    edges: [QuickBookEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type QuickBook and a cursor."
type QuickBookEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The QuickBook node."
    node: QuickBook!
}

type Response_addresses_fibk {
    data: [Location]
    errors: String
    message: String
    status: Status!
}

type Response_adminAppeal_pyrc {
    data: AppealAdmin
    errors: String
    message: String
    status: Status!
}

type Response_adminChargeWallet_kgem {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_adminUser_kecj {
    data: UserForAdmin
    errors: String
    message: String
    status: Status!
}

type Response_appealConnectClick_rstf {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_bookAppearances_jdtt {
    data: [BookAppearance]
    errors: String
    message: String
    status: Status!
}

type Response_bookCategories_zkoo {
    data: [BookCategory]
    errors: String
    message: String
    status: Status!
}

type Response_bookConnectClick_swpq {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_book_gadz {
    data: Book
    errors: String
    message: String
    status: Status!
}

type Response_buyDigitalBook_pesw {
    data: [UploadedFile]
    errors: String
    message: String
    status: Status!
}

type Response_chargeWallet_qkpi {
    data: CreatePayment
    errors: String
    message: String
    status: Status!
}

type Response_createAddress_bpgu {
    data: Location
    errors: String
    message: String
    status: Status!
}

type Response_createAppeal_qksb {
    data: Appeal
    errors: String
    message: String
    status: Status!
}

type Response_createBankAccount_eywn {
    data: BankAccount
    errors: String
    message: String
    status: Status!
}

type Response_createBookTemplate_rqkn {
    data: Book
    errors: String
    message: String
    status: Status!
}

type Response_createBook_lfja {
    data: Book
    errors: String
    message: String
    status: Status!
}

type Response_isReferenceCodeValid_ddpl {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_likeBook_fdad {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_login_rfda {
    data: Login
    errors: String
    message: String
    status: Status!
}

type Response_previousQuickBooks_pxyb {
    data: [QuickBook]
    errors: String
    message: String
    status: Status!
}

type Response_quickSubmitBook_ymei {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_seen_rkxn {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_sendVCode_lott {
    data: VCode
    errors: String
    message: String
    status: Status!
}

type Response_updateAddress_mxzu {
    data: Location
    errors: String
    message: String
    status: Status!
}

type Response_updateAppeal_scec {
    data: Appeal
    errors: String
    message: String
    status: Status!
}

type Response_updateBook_sjge {
    data: Book
    errors: String
    message: String
    status: Status!
}

type Response_updateUser_zeoz {
    data: User
    errors: String
    message: String
    status: Status!
}

type Response_uploadPrivateFileAccess_fonu {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_uploadPublicFileAccess_rtpc {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_user_fbhr {
    data: User
    errors: String
    message: String
    status: Status!
}

type Response_verifyVCode_xkbn {
    data: Login
    errors: String
    message: String
    status: Status!
}

type Response_wallet_xfdi {
    data: Wallet
    errors: String
    message: String
    status: Status!
}

type Response_wantBook_uajm {
    data: Boolean
    errors: String
    message: String
    status: Status!
}

type Response_withdrawRequest_fork {
    data: WithdrawRequest
    errors: String
    message: String
    status: Status!
}

"Information about pagination using a simple paginator."
type SimplePaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Are there more pages after this one?"
    hasMorePages: Boolean!
    "Index of the last item in the current page."
    lastItem: Int
    "Number of items per page."
    perPage: Int!
}

type Transaction {
    amount: Int!
    amountType: String!
    createdAt: Int!
    id: ID!
    type: String!
    walletID: ID!
}

"A paginated list of Transaction edges."
type TransactionConnection {
    "A list of Transaction edges."
    edges: [TransactionEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type Transaction and a cursor."
type TransactionEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The Transaction node."
    node: Transaction!
}

type UploadedFile {
    cypher: String
    mime: String!
    preview: String
    thumbnail: String
    type: String!
    uploadedAsFile: Boolean
    url: String!
}

type User {
    bannerID: ID
    bio: String
    birthAt: Int
    cityID: ID
    code: String
    created_at: String
    email: String
    expertiseIDs: [ID]
    friendIDs: [ID]
    hasAppealsHistory: Boolean
    hasAskHistory: Boolean
    hasBookHistory: Boolean
    hasLastSeen: Boolean
    id: ID
    introducerID: ID
    isEmailActivated: Boolean
    isPhoneActivated: Boolean
    lastname: String
    level: Int
    link: String
    linkTag: String
    name: String
    nationalId: String
    phone: String
    profileIDs: [ID]
    referenceCode: String
    referenceCodeLeft: Int
    savedAppealsIDs: [ID]
    savedAskIDs: [ID]
    savedBookIDs: [ID]
    universityID: ID
    username: String
    verifiedAt: Int
    wallet: Wallet
    xp: Int
    xpLevelPercentage: Int
}

type UserForAdmin {
    bannerID: ID
    bio: String
    birthAt: Int
    cityID: ID
    code: String
    created_at: String
    email: String
    expertiseIDs: [ID]
    friendIDs: [ID]
    hasAppealsHistory: Boolean
    hasAskHistory: Boolean
    hasBookHistory: Boolean
    hasLastSeen: Boolean
    id: ID
    introducerID: ID
    isEmailActivated: Boolean
    isPhoneActivated: Boolean
    lastname: String
    level: Int
    link: String
    linkTag: String
    name: String
    nationalId: String
    phone: String
    profileIDs: [ID]
    referenceCode: String
    referenceCodeLeft: Int
    savedAppealsIDs: [ID]
    savedAskIDs: [ID]
    savedBookIDs: [ID]
    token: String
    universityID: ID
    username: String
    verifiedAt: Int
    wallet: Wallet
    xp: Int
    xpLevelPercentage: Int
}

"A paginated list of UserForAdmin edges."
type UserForAdminConnection {
    "A list of UserForAdmin edges."
    edges: [UserForAdminEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type UserForAdmin and a cursor."
type UserForAdminEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The UserForAdmin node."
    node: UserForAdmin!
}

type UserProtected {
    id: ID
    name: String
    username: String
    verifiedAt: Int
}

type VCode {
    firstCharacter: String
    hint: String
    isSignup: Boolean
    length: Int!
    phone: String!
    vCode: String!
}

type Wallet {
    balance: Int!
    blocked: Int!
    coins: Int
    id: ID!
    totalWithdraw: Int
    userID: ID!
}

type WantedBook {
    createdAt: Int
    status: String
    title: String
}

"A paginated list of WantedBook edges."
type WantedBookConnection {
    "A list of WantedBook edges."
    edges: [WantedBookEdge!]!
    "Pagination information about the list of edges."
    pageInfo: PageInfo!
}

"An edge that contains a node of type WantedBook and a cursor."
type WantedBookEdge {
    "A unique cursor that can be used for pagination."
    cursor: String!
    "The WantedBook node."
    node: WantedBook!
}

type WithdrawRequest {
    amount: Int!
    bankAccountID: ID
    createdAt: Int!
    id: ID!
    isDone: Boolean
    status: String!
    toBeDoneAt: Int
    walletID: ID!
}

enum AdminRole {
    AD_CREATOR
    AD_MODIFIER
    CHAT_SUPPORT
    FINANCIAL
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
    "Amount of items."
    COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
    "Average."
    AVG
    "Amount of items."
    COUNT
    "Maximum."
    MAX
    "Minimum."
    MIN
    "Sum."
    SUM
}

"Directions for ordering a list of records."
enum SortOrder {
    "Sort records in ascending order."
    ASC
    "Sort records in descending order."
    DESC
}

enum Status {
    ERROR
    NOT_ACCESS
    NOT_AUTH
    NOT_FOUND
    SUCCESS
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
    "Only return trashed results."
    ONLY
    "Return both trashed and non-trashed results."
    WITH
    "Only return non-trashed results."
    WITHOUT
}

input LocationInput {
    lat: String!
    lon: String!
    text: String!
}

"Allows ordering a list of records."
input OrderByClause {
    "The column that is used for ordering."
    column: String!
    "The direction that is used for ordering."
    order: SortOrder!
}

input Seen {
    id: ID!
    times: Int!
    type: String
}

input UploadedFileInput {
    mime: String!
    preview: String
    sizeMB: Int
    thumbnail: String
    type: String!
    uploadedAsFile: Boolean
    url: String!
}
